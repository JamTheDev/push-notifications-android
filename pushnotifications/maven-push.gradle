apply plugin: 'signing'
apply plugin: 'maven-publish'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
    publishing {
        publications {
            maven(MavenPublication) { // Assuming you have a publication named 'maven'
                groupId = GROUP
                artifactId = POM_ARTIFACT_ID
                version = VERSION_NAME

                // Configure POM elements within pom.withXml for flexibility
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', POM_NAME)
                    root.appendNode('packaging', POM_PACKAGING)
                    // ... Add other POM elements as needed
                }

                // Configure repositories based on build type
                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                // Enable signing for release builds
                signing {
                    isRequired { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
                    sign configurations.archives
                }
            }
        }
    }


    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
    }
}